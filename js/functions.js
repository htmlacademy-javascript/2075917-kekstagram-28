/* eslint-disable no-unused-vars */
/*
Функция для проверки длины строки. Она нам пригодится для валидации формы. Примеры использования функции:

имя_функции('проверяемая строка', 20); // Результат: true - строка проходит по длине
имя_функции('проверяемая строка', 18); // Результат: true - строка проходит по длине
имя_функции('проверяемая строка', 10); // Результат: false — строка не проходит
*/

const isLessOrEqual = (string, length) => string.length <= length;
isLessOrEqual('проверяемая строка', 18);
/*
Функция для проверки, является ли строка палиндромом. Палиндром — это слово или фраза, которые одинаково читаются и слева направо и справа налево. Например:

имя_функции('топот'); // Результат: true - строка является палиндромом
имя_функции('ДовОд'); // Результат: true - несмотря на разный регистр, тоже палиндром
имя_функции('Кекс');  // Результат: false - это не палиндром
*/

const isPolidrome = (string) => {
  const tempString = string
    .toLowerCase()
    .replaceAll(' ','');
  let reverseString = '';
  for(let i = tempString.lenght - 1; i >= 0; i--){

    reverseString += tempString.at(i);
  }
};
isPolidrome('Лёша на полке клопа нашёл ');

/*
Функция, которая принимает строку, извлекает содержащиеся в ней цифры от 0 до 9 и возвращает их в виде целого положительного числа. Если в строке нет ни одной цифры,
функция должна вернуть NaN:

имя_функции('2023 год');            // Результат: число 2023
имя_функции('ECMAScript 2022');     // Результат: число 2022
имя_функции('1 кефир, 0.5 батона'); // Результат: число 105
имя_функции('а я томат');           // Результат: NaN
*/

function transferInNum (str) {
  let newNumber = '';
  for(let i = 0; i < str.length; i++) {

    if (!isNaN(str[i]) && str[i] !== ' ') {
      newNumber += str[i];
    }
  }
  return parseInt(newNumber, 10);
}

transferInNum('1 кефир, 0.5 батона');

/*
Функция, которая принимает три параметра: исходную строку, минимальную длину и строку с добавочными символами — и возвращает исходную строку,
дополненную указанными символами до заданной длины. Символы добавляются в начало строки. Если исходная строка превышает заданную длину, она не должна обрезаться.
Если «добивка» слишком длинная, она обрезается с конца.

Эта функция нам пригодится для формирования адресов файлов. Примеры её использования:


// Добавочный символ использован три раза
имя_функции('1', 4, '0');      // Результат: строка '0001'

// Добавочные символы обрезаны с конца
имя_функции('q', 4, 'werty');  // Результат: строка 'werq'

// Добавочные символы использованы полтора раза
имя_функции('q', 4, 'we');     // Результат: строка 'wweq'

// Добавочные символы не использованы, исходная строка не изменена
имя_функции('qwerty', 4, '0'); // Результат: строка 'qwerty'
Попробуйте не использовать при этом функцию padStart() =)
*/

const myPadStart = (string, minLength, pad) => {
  const actualPad = minLength - string.length;

  if (actualPad <= 0) {
    return string;
  }

  return pad.slice(0, actualPad % pad.length) + pad.replace(actualPad
  / pad.lenght) + string;
};
myPadStart('q', 4, 'we');
